{"cells":[{"cell_type":"markdown","metadata":{"id":"W1c1N1D6H0MV"},"source":["#Лабораторная работа №7"]},{"cell_type":"markdown","metadata":{"id":"HZxvk8dYH0MW"},"source":["# Задание"]},{"cell_type":"markdown","metadata":{"id":"2cGXG1SyH0MW"},"source":["Выбрать свой корпус текста и обучить последовательно на нём три архитектуры нейронных сетей на\n","задаче Next Token Prediction (предсказание следующего токена).\n","选择您的文本语料库，并在 Next Token Prediction 任务（下一个标记的预测）上按顺序训练三个神经网络架构。\n","Архитектуры:\n","* Одномерная свёрточная нейронная сеть 一维卷积神经网络\n","* Рекуррентная нейронная сеть 递归神经网络\n","* Трансформер кодировщик 变压器编码器 transform encoder\n","\n","Визуализировать полученное векторное представление токенов. Сохранить модели в формате onnx. 可视化生成的标记向量表示。 以 onnx 格式保存模型。\n","\n","Дописать код для генерации текста по входной последовательности.\n","添加代码以从输入序列生成文本。\n","В качестве примера приводится обучение на русском корпусе текста - произведении\n","Ф.М. Достоевского \"Преступление и наказание\".例如，给出了俄语文本语料库的训练——F.M.的工作。 陀思妥耶夫斯基《罪与罚》。"]},{"cell_type":"markdown","metadata":{"id":"8oyW_66-H0MX"},"source":["Отчет должен содержать: титульный лист, задание с вариантом корпуса текста, скриншоты и краткие пояснения по каждому этапу лабораторной работы, визуализация векторного представления.\n"]},{"cell_type":"markdown","metadata":{"id":"OfptVMQOH0MX"},"source":["#Контрольные вопросы\n","1. Предобработка текста 文本预处理\n","2. Архитектура трансформер 架构变压器\n","3. Удаление шумовых слов 去除噪音词\n","4. Стемминг и лемматизация 词干和词形还原\n","5. Что такое эмбеддинг? 什么是嵌入？"]},{"cell_type":"markdown","metadata":{"id":"kZRXXChRYzYb"},"source":["#Выполнение лабораторной работы 执行实验室"]},{"cell_type":"markdown","metadata":{"id":"OWik_Wn_iM2M"},"source":["## Установка зависимостей 安装依赖项"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"c1Z5Kc1JNtqi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818437795,"user_tz":-180,"elapsed":19538,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"11a703ee-121d-44a5-c267-76293c56f3bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (0.1.96)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting umap-learn\n","  Downloading umap-learn-0.5.3.tar.gz (88 kB)\n","\u001b[K     |████████████████████████████████| 88 kB 3.7 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.21.6)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.0.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.4.1)\n","Requirement already satisfied: numba>=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.51.2)\n","Collecting pynndescent>=0.5\n","  Downloading pynndescent-0.5.7.tar.gz (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 10.7 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn) (4.64.0)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (57.4.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from pynndescent>=0.5->umap-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22->umap-learn) (3.1.0)\n","Building wheels for collected packages: umap-learn, pynndescent\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82829 sha256=47311222e75a965df5b26a889522a778c1f760afe133883ee837ec6017230749\n","  Stored in directory: /root/.cache/pip/wheels/b3/52/a5/1fd9e3e76a7ab34f134c07469cd6f16e27ef3a37aeff1fe821\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.7-py3-none-any.whl size=54286 sha256=54bcdd700bda1b1afd5549c390dc51dd83cd52f195d37b4f663b3c16e4cc1e70\n","  Stored in directory: /root/.cache/pip/wheels/7f/2a/f8/7bd5dcec71bd5c669f6f574db3113513696b98f3f9b51f496c\n","Successfully built umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn\n","Successfully installed pynndescent-0.5.7 umap-learn-0.5.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gdown in /usr/local/lib/python3.7/dist-packages (4.4.0)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.7/dist-packages (from gdown) (2.23.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from gdown) (3.7.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from gdown) (4.64.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from gdown) (1.15.0)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from gdown) (4.6.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown) (2022.6.15)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown) (3.0.4)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.7/dist-packages (from requests[socks]->gdown) (1.7.1)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: jieba in /usr/local/lib/python3.7/dist-packages (0.42.1)\n"]}],"source":["!pip install sentencepiece\n","!pip install umap-learn\n","!pip install gdown\n","!pip install jieba #为了中文的分词\n"]},{"cell_type":"markdown","metadata":{"id":"bwWSg-X2iQLD"},"source":["## Подключение библиотек 连接库\n","\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"eK3ApTEFOHxt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818470996,"user_tz":-180,"elapsed":33208,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"69ebf300-44ed-4ccd-dfa1-2e0e7a4a3183"},"outputs":[{"output_type":"stream","name":"stderr","text":["Building prefix dict from the default dictionary ...\n"]},{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]},{"output_type":"stream","name":"stderr","text":["Dumping model to file cache /tmp/jieba.cache\n","Loading model cost 1.948 seconds.\n","Prefix dict has been built successfully.\n"]},{"output_type":"stream","name":"stdout","text":["安东 是 最 优秀 的 老师\n"]}],"source":["from string import punctuation\n","import math\n","import time\n","import os\n","\n","\n","import numpy as np\n","import pandas as pd\n","from tqdm.notebook import tqdm\n","from matplotlib import pyplot as plt\n","from umap import UMAP\n","import sentencepiece as spm\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","from google.colab import drive\n","drive.mount('/content/drive',force_remount=True)\n","\n","import jieba #中文的分词\n","sentence=\"安东是最优秀的老师\"\n","sentence_seg=jieba.cut(sentence)\n","result=' '.join(sentence_seg)\n","print(result)\n","\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"3ExIcjAkPvc3"},"source":["## Где взять датасеты 从哪里获取数据集\n","* https://nlpub.ru/Ресурсы - русские наборы данных\n","\n","* https://huggingface.co/datasets - мультиязычные наборы данных\n","\n","* https://avidreaders.ru/books/ - книги в txt \n","\n","* https://z-lib.org/ - книги в pdf, txt\n","\n","* https://pdftotext.com/ - онлайн конвертер из pdf в txt"]},{"cell_type":"markdown","metadata":{"id":"U9b5IzHaiWID"},"source":["## Загрузка необработанного корпуса 装载原始船体"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"WAdsZ87rsMjr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818470997,"user_tz":-180,"elapsed":9,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"3ce419e1-7d2f-4f18-83d8-c5351a978235"},"outputs":[{"output_type":"stream","name":"stdout","text":["Retrieving folder list\n","Failed to retrieve folder contents:\n","\n"," \tCannot retrieve the folder information from the link. You may need to\n","\tchange the permission to 'Anyone with the link'. \n","\n"]}],"source":["#!gdown --id 1MO6aev-2UUpZlwF0o4ZVGvQLi1YfZhck\n","\n","\n","!gdown --folder https://drive.google.com/file/d/1P6wW7GU4sWLdW7F503vy7UtRcynG6EON/view?usp=sharing"]},{"cell_type":"markdown","metadata":{"id":"PhRsWNXnicOk"},"source":["## Очистка корпуса от пунктуации 清洁标点符号的主体（cleaning）"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"B4Qu-18eRUTl","colab":{"base_uri":"https://localhost:8080/","height":316},"executionInfo":{"status":"ok","timestamp":1655818472546,"user_tz":-180,"elapsed":1554,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"aa727232-d684-4da4-8381-e31dae7a45e1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f322afc9250>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["def filter_punctuation(x):\n","    table = str.maketrans('', '', punctuation)\n","    x = map(lambda x: x.lower(), x)\n","    x = map(lambda x: x.translate(table), x)\n","    x = filter(lambda x: len(x)>0, x)\n","    return list(x)\n","\n","# FILENAME = 'prestuplenie-i-nakazanie.txt'\n","FILENAME = '/content/drive/MyDrive/learning/avidreaders.ru__mertvye-dushi.txt'\n","\n","corpus = []\n","# encoding может быть один из ['ascii', 'utf-8', 'cp1251'] 编码可以是 ['ascii', 'utf-8', 'cp1251'] 之一\n","with open(FILENAME, 'r',\n","          encoding='utf-8') as f:\n","    for line in f:\n","        corpus.extend(list(filter(lambda x: len(x)>0, line.split())))\n","\n","corpus = filter_punctuation(corpus)\n","with open('corpus.txt', 'w') as f:\n","    f.write('\\n'.join(corpus))\n","corpus_df = pd.Series(corpus)\n","corpus_df.value_counts().head(50).plot(kind='bar', figsize=(10, 4))"]},{"cell_type":"markdown","metadata":{"id":"_AxznyxPi9Gw"},"source":["## Вывод наиболее частых слов 最常用词的输出"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"kHXZAJBSsWyz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818472547,"user_tz":-180,"elapsed":6,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"40337ede-835f-4bcd-eca9-1bd452ecf894"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["и              4851\n","–              3788\n","в              2960\n","не             2447\n","что            1982\n","               ... \n","присоветует       1\n","промолвит         1\n","томудругому       1\n","михеич            1\n","обрывается        1\n","Length: 25876, dtype: int64"]},"metadata":{},"execution_count":13}],"source":["pd.Series(corpus).value_counts()"]},{"cell_type":"markdown","metadata":{"id":"OP8vpY5BjCKb"},"source":["## Обучение токенизатора на корпусе текста 在文本语料库上训练分词器（segmentation）\n","Используется алгоритм [WordPiece](https://paperswithcode.com/method/wordpiece)\n"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"LOQI90lQTGMI","executionInfo":{"status":"ok","timestamp":1655818474636,"user_tz":-180,"elapsed":10,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[],"source":["spm.SentencePieceTrainer.train(input='corpus.txt', model_prefix='m',\n","                               vocab_size=10000)"]},{"cell_type":"markdown","metadata":{"id":"Lp2IhmDxjSPe"},"source":["## Проверка токенизатора 检查标记器"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"tI3WMyDaVztg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818474637,"user_tz":-180,"elapsed":9,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"1c2d4560-cecc-486d-b5e9-be5017d9a7fe"},"outputs":[{"output_type":"stream","name":"stdout","text":["[45, 2506, 52, 151, 2079, 236, 4085, 7, 52, 356, 526]\n","['▁это', '▁пример', '▁т', 'ок', 'ени', 'з', 'аци', 'и', '▁т', 'ек', 'ста']\n"]}],"source":["sp = spm.SentencePieceProcessor(model_file='m.model')\n","#prompt = '我早上吃了鸡蛋和牛奶，中午睡觉，下午学习，晚上和朋友去打篮球'\n","prompt = 'это пример токенизации текста'\n","#prompt = 'это'\n","print(sp.encode_as_ids(prompt)) # == sp.encode \n","print(sp.encode_as_pieces(prompt))"]},{"cell_type":"markdown","metadata":{"id":"ljqHq-vMjWFq"},"source":["## Получение словаря токенов 获取令牌字典 建立字典 将每个词映射到一个唯一的索引（index）"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"vYaWXLkU5Rbe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818474637,"user_tz":-180,"elapsed":6,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"46be5a43-7410-4786-dad0-aef741c26ec5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['<unk>', 0],\n"," ['<s>', 1],\n"," ['</s>', 2],\n"," ['▁', 3],\n"," ['▁и', 4],\n"," ['е', 5],\n"," ['–', 6],\n"," ['и', 7],\n"," ['▁в', 8],\n"," ['а', 9],\n"," ['▁не', 10],\n"," ['й', 11],\n"," ['у', 12],\n"," ['▁на', 13],\n"," ['▁что', 14],\n"," ['▁с', 15],\n"," ['х', 16],\n"," ['▁он', 17],\n"," ['я', 18],\n"," ['м', 19]]"]},"metadata":{},"execution_count":16}],"source":["vocabs = [[sp.id_to_piece(id), id] for id in range(sp.get_piece_size())]\n","vocabs[:20]"]},{"cell_type":"markdown","metadata":{"id":"GnT4C4ztjY-o"},"source":["## Создание набора данных для задачи Next Token Prediction 为 Next Token Prediction 任务创建数据集"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"75xUeA7XWxR0","executionInfo":{"status":"ok","timestamp":1655818485252,"user_tz":-180,"elapsed":10618,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[],"source":["def get_window(x):\n","    XX.append(x.values.copy())\n","    return 0\n","\n","WINDOW_SIZE = 16\n","XX = []\n","corpus_df = pd.DataFrame(np.concatenate(sp.encode(corpus)))\n","corpus_df.columns = ['token_ids']\n","corpus_df['ids'] = corpus_df['token_ids'].factorize(sort=True)[0]\n","corpus_df['ids'].rolling(WINDOW_SIZE+1).apply(get_window)\n","table = corpus_df[['token_ids', 'ids']].\\\n","                 drop_duplicates().\\\n","                 sort_values(['ids'], ascending=True).\\\n","                 values\n","ids2token_ids = {v:k for k,v  in table}"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"uOfvxvAqYmKN","executionInfo":{"status":"ok","timestamp":1655818485719,"user_tz":-180,"elapsed":472,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[],"source":["data = np.uint16(XX)\n","X = data[:, :WINDOW_SIZE].copy()\n","y = data[:, WINDOW_SIZE:].copy()\n","\n","indexes = np.random.permutation(y.size)\n","X = X[indexes].copy()\n","y = y[indexes].copy()\n","assert np.unique(X).size == np.unique(y).size, \\\n","    'Уменьшите размер словаря при обучении токенизатора'"]},{"cell_type":"markdown","metadata":{"id":"clqBWe2Ig1SK"},"source":["## Обучение в Keras (прототипирование) Keras 培训（原型设计）keras 是用tensorflow 封装好的功能"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"2jeZ_j9pZRoy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1655818486829,"user_tz":-180,"elapsed":1115,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"outputId":"beea001b-9148-41c7-ed3e-ee324faaeae3"},"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/initializers.py:119: calling RandomUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n","Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 16)]              0         \n","_________________________________________________________________\n","embedding (Embedding)        (None, 16, 50)            498950    \n","_________________________________________________________________\n","conv1d (Conv1D)              (None, 6, 128)            32128     \n","_________________________________________________________________\n","conv1d_1 (Conv1D)            (None, 1, 256)            164096    \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 256)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 9979)              2564603   \n","=================================================================\n","Total params: 3,259,777\n","Trainable params: 3,259,777\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["import tensorflow as tf\n","\n","inp = tf.keras.layers.Input((WINDOW_SIZE,))\n","x = tf.keras.layers.Embedding(np.unique(X).size, output_dim=50)(inp)\n","#x = tf.keras.layers.LSTM(128, return_sequences=False)(x)\n","#x = tf.keras.layers.Lambda(lambda xx: tf.transpose(xx, perm=[0, 2, 1]))(x)\n","x = tf.keras.layers.Conv1D(128, (5,), strides=(2,), activation='relu')(x)\n","x = tf.keras.layers.Conv1D(256, (5,), strides=(2,), activation='relu')(x)\n","#x = tf.keras.layers.Lambda(lambda xx: tf.transpose(xx, perm=[0, 2, 1]))(x)\n","x = tf.keras.layers.GlobalAveragePooling1D()(x)\n","out = tf.keras.layers.Dense(np.unique(y).size, activation='softmax')(x)\n","\n","model = tf.keras.models.Model(inp, out)\n","model.summary()"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"TbL6pw8mazFP","executionInfo":{"status":"ok","timestamp":1655818486830,"user_tz":-180,"elapsed":6,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[],"source":["model.compile(loss='sparse_categorical_crossentropy', optimizer='adam',\n","              metrics=['accuracy', tf.keras.metrics.SparseTopKCategoricalAccuracy(5)])\n","#model = tf.keras.models.load_model('model.h5')"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":395},"id":"5a7xQq_qZ-jK","outputId":"e2961817-3400-4a10-af4b-56a1a3d10ec5","executionInfo":{"status":"error","timestamp":1655818524962,"user_tz":-180,"elapsed":38137,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n"," 28672/182050 [===>..........................] - ETA: 3:09 - loss: 8.0011 - acc: 0.0269 - sparse_top_k_categorical_accuracy: 0.1206"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-100f71d2a5d4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2e-3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_split\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1024\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m    778\u001b[0m           \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m           \u001b[0mvalidation_freq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_freq\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 780\u001b[0;31m           steps_name='steps_per_epoch')\n\u001b[0m\u001b[1;32m    781\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    782\u001b[0m   def evaluate(self,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mmodel_iteration\u001b[0;34m(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq, mode, validation_in_fit, prepared_feed_values_from_dataset, steps_name, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m         \u001b[0;31m# Get outputs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m         \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m           \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3291\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3292\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3293\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3294\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1456\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1457\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1458\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1459\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1460\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["tf.keras.backend.set_value(model.optimizer.lr, 2e-3)\n","model.fit(X, y, validation_split=0.0, epochs=20, batch_size=1024)"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"kgpqDZCizMPS","executionInfo":{"status":"ok","timestamp":1655818529564,"user_tz":-180,"elapsed":282,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"outputs":[],"source":["model.save('model.h5')"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"IGZYlskq4PAr","executionInfo":{"status":"ok","timestamp":1655818531328,"user_tz":-180,"elapsed":306,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"01a603de-f702-4ded-db89-afcc9c517c9c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9979, 50)"]},"metadata":{},"execution_count":23}],"source":["model.get_weights()[0].shape"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"4DsjaS2IbTht","executionInfo":{"status":"error","timestamp":1655818539528,"user_tz":-180,"elapsed":5588,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":425,"referenced_widgets":["33eb784501024382bfbd13b8bfef2ad4","c31865641c8648e08a4ea52578eb212b","5235e16c1e044282a5bdfd2d4aa7e24d","8d4f5a1c0ca54d4d98c8cf5b6e5534a2","d8aba4ee845e4465a9cdbf731127be10","1a29bac2c33a4155ad8e539bc53d4771","e3caea3309c34787a7555b420f14bbe8","75fa6e2a8be3492e8e7c9e98c4f53c77","f1ef203498b1427aa8a3e3452e467ab6","60648f80ce734d1aa2baab151f09010c","f4834a470309412695622b141b7f1e83"]},"outputId":"cc6c7301-9e50-41b8-97bf-0fc086f33c70"},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/178 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"33eb784501024382bfbd13b8bfef2ad4"}},"metadata":{}},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-d9cfbe4f124c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mpreds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m                 \u001b[0margsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1076\u001b[0m           \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1077\u001b[0m           \u001b[0msteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1078\u001b[0;31m           callbacks=callbacks)\n\u001b[0m\u001b[1;32m   1079\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1080\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mmodel_iteration\u001b[0;34m(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq, mode, validation_in_fit, prepared_feed_values_from_dataset, steps_name, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m         \u001b[0;31m# Get outputs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m         \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m           \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3291\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3292\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3293\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3294\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1456\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1457\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1458\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1459\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1460\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["batch_size = 1024\n","preds = []\n","for i in tqdm(range(X.shape[0]//batch_size+1)):\n","    preds.append(model.predict(X[i*batch_size:(i+1)*batch_size].copy()).\\\n","                 argsort(axis=-1)[:, -5:].copy())\n","preds = np.concatenate(preds)"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"w5OX-O4vcS0t","executionInfo":{"status":"error","timestamp":1655818546568,"user_tz":-180,"elapsed":340,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":226},"outputId":"d60ddc9c-1d4e-467b-f01a-883dd4c57076"},"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-1020fe4ced76>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mcorpus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'pred@%d'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mcorpus_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mWINDOW_SIZE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pred@%d'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpreds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcorpus_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'shape'"]}],"source":["for i in range(preds.shape[1]):\n","    corpus_df['pred@%d'%(i+1)] = -1\n","    corpus_df.loc[WINDOW_SIZE:, 'pred@%d'%(i+1)] = preds[:,-i]\n","corpus_df.head(50)"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"u3Ak79a25M8l","executionInfo":{"status":"error","timestamp":1655818553523,"user_tz":-180,"elapsed":297,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":191},"outputId":"db17b2e1-cdea-4b22-80d7-21681bd1bf43"},"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-aaa11bc3856e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcorpus_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mcorpus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcorpus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mids2token_ids\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'shape'"]}],"source":["for col in corpus_df.columns[-preds.shape[1]:]:\n","    corpus_df[col] = corpus_df[col].apply(lambda x: ids2token_ids.get(x, -1))"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"9dbRrjUE6W0S","executionInfo":{"status":"error","timestamp":1655818558666,"user_tz":-180,"elapsed":324,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":518},"outputId":"32253c12-6fe4-42d2-dce3-4acea089654d"},"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'pred@1'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-9e74eaaf5977>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorpus_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'pred@1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mWINDOW_SIZE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#(corpus_df.token_ids==corpus_df[corpus_df.columns[-preds.shape[1]:]])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'pred@1'"]}],"source":["sp.decode(corpus_df['pred@1'].tolist()[WINDOW_SIZE:])\n","#(corpus_df.token_ids==corpus_df[corpus_df.columns[-preds.shape[1]:]])"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"lgwUOJaz51ai","executionInfo":{"status":"ok","timestamp":1655818612397,"user_tz":-180,"elapsed":48899,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fafa5f4d-79c3-4933-b2dc-585f4dfea170"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numba/np/ufunc/parallel.py:363: NumbaWarning: The TBB threading layer requires TBB version 2019.5 or later i.e., TBB_INTERFACE_VERSION >= 11005. Found TBB_INTERFACE_VERSION = 9107. The TBB threading layer is disabled.\n","  warnings.warn(problem)\n"]}],"source":["#from sklearn.decomposition import PCA\n","embeddings = UMAP(n_components=2, random_state=2).\\\n","                                          fit_transform(model.get_weights()[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kyKzeqRl6MOY"},"outputs":[],"source":["fig, ax = plt.subplots(figsize=(20, 20))\n","ax.scatter(embeddings[:, 0], embeddings[:, 1], s=0.5, alpha=0.4)\n","\n","whitelist = frozenset(corpus_df.token_ids.value_counts().index[:300].values)\n","for i, txt in enumerate(embeddings):\n","    token_id = ids2token_ids[i]\n","    if token_id not in whitelist:\n","        continue\n","    ax.annotate(vocabs[token_id][0],\n","                (embeddings[i][0], embeddings[i][1]))\n","plt.savefig('vecs.svg')"]},{"cell_type":"markdown","metadata":{"id":"7tEUTO6Wg1Sa"},"source":["## Обучение в Pytorch 在 Pytorch 中学习\n","пример основан на\n","\n","https://github.com/pytorch/examples/tree/master/word_language_model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BU94PfkYaA0M"},"outputs":[],"source":["class ConvModel(nn.Module):\n","    \"\"\"Container module with an encoder, a convolutional module, and a decoder.\"\"\"\n","\n","    def __init__(self, ntoken, ninp, nhid, dropout=0.1, tie_weights=False):\n","        super(ConvModel, self).__init__()\n","        self.ntoken = ntoken\n","        self.drop = nn.Dropout(dropout)\n","        self.encoder = nn.Embedding(ntoken, ninp)\n","        self.conv = nn.Sequential(\n","                    nn.Conv1d(ninp, nhid//2, 5, stride=3, padding=2, dilation=1),\n","                    nn.ReLU(),\n","                    nn.Conv1d(nhid//2, nhid, 5, stride=3, padding=2, dilation=1),\n","                    nn.ReLU(),\n","                    nn.Conv1d(nhid, nhid*2, 5, stride=3, padding=2, dilation=1),\n","                    nn.ReLU(),\n","                    )\n","        self.decoder = nn.Linear(nhid*2, ntoken)\n","\n","        self.init_weights()\n","\n","        self.nhid = nhid\n","        self.model_type = 'Conv'\n","\n","    def init_weights(self):\n","        initrange = 0.1\n","        nn.init.uniform_(self.encoder.weight, -initrange, initrange)\n","        nn.init.zeros_(self.decoder.bias)\n","        nn.init.uniform_(self.decoder.weight, -initrange, initrange)\n","\n","    def forward(self, inputs):\n","        emb = self.drop(self.encoder(inputs))\n","        emb = emb.transpose(2, 1)\n","        output = self.conv(emb)\n","        #print(output.size())\n","        output = self.drop(output)\n","        output = output.transpose(2, 1)\n","        decoded = self.decoder(output)\n","        #print(decoded.size())\n","        decoded = decoded.view(-1, self.ntoken)\n","        return F.log_softmax(decoded, dim=1)\n","\n","\n","class RNNModel(nn.Module):\n","    \"\"\"Container module with an encoder, a recurrent module, and a decoder.\"\"\"\n","\n","    def __init__(self, rnn_type, ntoken, ninp, nhid, nlayers, dropout=0.1, tie_weights=False):\n","        super(RNNModel, self).__init__()\n","        self.ntoken = ntoken\n","        self.drop = nn.Dropout(dropout)\n","        self.encoder = nn.Embedding(ntoken, ninp)\n","        if rnn_type in ['LSTM', 'GRU']:\n","            self.rnn = getattr(nn, rnn_type)(ninp, nhid, nlayers, dropout=dropout)\n","        else:\n","            try:\n","                nonlinearity = {'RNN_TANH': 'tanh', 'RNN_RELU': 'relu'}[rnn_type]\n","            except KeyError:\n","                raise ValueError( \"\"\"An invalid option for `--model` was supplied,\n","                                 options are ['LSTM', 'GRU', 'RNN_TANH' or 'RNN_RELU']\"\"\")\n","            self.rnn = nn.RNN(ninp, nhid, nlayers, nonlinearity=nonlinearity, dropout=dropout)\n","        self.decoder = nn.Linear(nhid, ntoken)\n","\n","        # Optionally tie weights as in:\n","        # \"Using the Output Embedding to Improve Language Models\" (Press & Wolf 2016)\n","        # https://arxiv.org/abs/1608.05859\n","        # and\n","        # \"Tying Word Vectors and Word Classifiers: A Loss Framework for Language Modeling\" (Inan et al. 2016)\n","        # https://arxiv.org/abs/1611.01462\n","        if tie_weights:\n","            if nhid != ninp:\n","                raise ValueError('When using the tied flag, nhid must be equal to emsize')\n","            self.decoder.weight = self.encoder.weight\n","\n","        self.init_weights()\n","\n","        self.rnn_type = rnn_type\n","        self.nhid = nhid\n","        self.nlayers = nlayers\n","\n","    def init_weights(self):\n","        initrange = 0.1\n","        nn.init.uniform_(self.encoder.weight, -initrange, initrange)\n","        nn.init.zeros_(self.decoder.bias)\n","        nn.init.uniform_(self.decoder.weight, -initrange, initrange)\n","\n","    def forward(self, input, hidden):\n","        emb = self.drop(self.encoder(input))\n","        output, hidden = self.rnn(emb, hidden)\n","        output = self.drop(output)\n","        decoded = self.decoder(output)\n","        decoded = decoded.view(-1, self.ntoken)\n","        return F.log_softmax(decoded, dim=1), hidden\n","\n","    def init_hidden(self, bsz):\n","        weight = next(self.parameters())\n","        if self.rnn_type == 'LSTM':\n","            return (weight.new_zeros(self.nlayers, bsz, self.nhid),\n","                    weight.new_zeros(self.nlayers, bsz, self.nhid))\n","        else:\n","            return weight.new_zeros(self.nlayers, bsz, self.nhid)\n","\n","# Temporarily leave PositionalEncoding module here. Will be moved somewhere else.\n","class PositionalEncoding(nn.Module):\n","    r\"\"\"Inject some information about the relative or absolute position of the tokens in the sequence.\n","        The positional encodings have the same dimension as the embeddings, so that the two can be summed.\n","        Here, we use sine and cosine functions of different frequencies.\n","    .. math:\n","        \\text{PosEncoder}(pos, 2i) = sin(pos/10000^(2i/d_model))\n","        \\text{PosEncoder}(pos, 2i+1) = cos(pos/10000^(2i/d_model))\n","        \\text{where pos is the word position and i is the embed idx)\n","    Args:\n","        d_model: the embed dim (required).\n","        dropout: the dropout value (default=0.1).\n","        max_len: the max. length of the incoming sequence (default=5000).\n","    Examples:\n","        >>> pos_encoder = PositionalEncoding(d_model)\n","    \"\"\"\n","\n","    def __init__(self, d_model, dropout=0.1, max_len=5000):\n","        super(PositionalEncoding, self).__init__()\n","        self.dropout = nn.Dropout(p=dropout)\n","\n","        pe = torch.zeros(max_len, d_model)\n","        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n","        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n","        pe[:, 0::2] = torch.sin(position * div_term)\n","        pe[:, 1::2] = torch.cos(position * div_term)\n","        pe = pe.unsqueeze(0).transpose(0, 1)\n","        self.register_buffer('pe', pe)\n","\n","    def forward(self, x):\n","        r\"\"\"Inputs of forward function\n","        Args:\n","            x: the sequence fed to the positional encoder model (required).\n","        Shape:\n","            x: [sequence length, batch size, embed dim]\n","            output: [sequence length, batch size, embed dim]\n","        Examples:\n","            >>> output = pos_encoder(x)\n","        \"\"\"\n","\n","        x = x + self.pe[:x.size(0), :]\n","        return self.dropout(x)\n","\n","class TransformerModel(nn.Module):\n","    \"\"\"Container module with an encoder, a recurrent or transformer module, and a decoder.\"\"\"\n","\n","    def __init__(self, ntoken, ninp, nhead, nhid, nlayers, dropout=0.1):\n","        super(TransformerModel, self).__init__()\n","        try:\n","            from torch.nn import TransformerEncoder, TransformerEncoderLayer\n","        except:\n","            raise ImportError('TransformerEncoder module does not exist in PyTorch 1.1 or lower.')\n","        self.model_type = 'Transformer'\n","        self.src_mask = None\n","        self.pos_encoder = PositionalEncoding(ninp, dropout)\n","        encoder_layers = TransformerEncoderLayer(ninp, nhead, nhid, dropout)\n","        self.transformer_encoder = TransformerEncoder(encoder_layers, nlayers)\n","        self.encoder = nn.Embedding(ntoken, ninp)\n","        self.ninp = ninp\n","        self.decoder = nn.Linear(ninp, ntoken)\n","\n","        self.init_weights()\n","\n","    def _generate_square_subsequent_mask(self, sz):\n","        mask = (torch.triu(torch.ones(sz, sz)) == 1).transpose(0, 1)\n","        # https://github.com/pytorch/pytorch/issues/28508\n","        mask = mask.float().masked_fill(mask == 0, float('-inf')).masked_fill(mask == 1, float(0.0))\n","        return mask\n","\n","    def init_weights(self):\n","        initrange = 0.1\n","        nn.init.uniform_(self.encoder.weight, -initrange, initrange)\n","        nn.init.zeros_(self.decoder.bias)\n","        nn.init.uniform_(self.decoder.weight, -initrange, initrange)\n","\n","    def forward(self, src, has_mask=True):\n","        if has_mask:\n","            device = src.device\n","            if self.src_mask is None or self.src_mask.size(0) != len(src):\n","                mask = self._generate_square_subsequent_mask(len(src)).to(device)\n","                self.src_mask = mask\n","        else:\n","            self.src_mask = None\n","        #src = src.type(torch.int64)\n","        \n","        src = self.encoder(src) * math.sqrt(self.ninp)\n","        src = self.pos_encoder(src)\n","        output = self.transformer_encoder(src, self.src_mask)\n","        output = self.decoder(output)\n","        return F.log_softmax(output, dim=-1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EzBRok6bbPQz"},"outputs":[],"source":["###############################################################################\n","# Training code\n","###############################################################################\n","\n","def repackage_hidden(h):\n","    \"\"\"Wraps hidden states in new Tensors, to detach them from their history.\"\"\"\n","\n","    if isinstance(h, torch.Tensor):\n","        return h.detach()\n","    else:\n","        return tuple(repackage_hidden(v) for v in h)\n","\n","\n","# get_batch subdivides the source data into chunks of length args.bptt.\n","# If source is equal to the example output of the batchify function, with\n","# a bptt-limit of 2, we'd get the following two Variables for i = 0:\n","# ┌ a g m s ┐ ┌ b h n t ┐\n","# └ b h n t ┘ └ c i o u ┘\n","# Note that despite the name of the function, the subdivison of data is not\n","# done along the batch dimension (i.e. dimension 1), since that was handled\n","# by the batchify function. The chunks are along dimension 0, corresponding\n","# to the seq_len dimension in the LSTM.\n","\n","def get_batch(source, i):\n","    seq_len = min(bptt, len(y) - 1 - i)\n","    return torch.LongTensor(X[i:i+seq_len].astype(np.int32)).to(device), \\\n","           torch.LongTensor(y[i:i+seq_len].astype(np.int32)).to(device)\n","\n","\n","def evaluate(data_source):\n","    # Turn on evaluation mode which disables dropout.\n","    model.eval()\n","    total_loss = 0.\n","    ntokens = np.unique(y).size\n","    model_types = frozenset(['Transformer', 'Conv'])\n","\n","    if model_type not in model_types:\n","        hidden = model.init_hidden(WINDOW_SIZE)\n","    with torch.no_grad():\n","        for i in range(0, y.size - 1, bptt):\n","            data, targets = get_batch(y, i)\n","            if model_type == 'Transformer':\n","                output = model(data)\n","                output = output[:, -1, :]\n","            elif model_type == 'Conv':\n","                output = model(data)\n","                output = output.view(data.size()[0], -1, ntokens)[:, -1]\n","            else:\n","                output, hidden = model(data, hidden)\n","                hidden = repackage_hidden(hidden)\n","                output = output.view(-1, WINDOW_SIZE, ntokens)[:, -1]\n","            #print(output.size())\n","            total_loss += len(data) * criterion(output, targets.squeeze(1)).item()\n","    return total_loss / (len(data_source) - 1)\n","\n","\n","def train(batch_size=128):\n","    # Turn on training mode which enables dropout.\n","    model.train()\n","    total_loss = 0.\n","    start_time = time.time()\n","    ntokens = np.unique(y).size\n","    model_types = frozenset(['Transformer', 'Conv'])\n","    if model_type not in model_types:\n","        hidden = model.init_hidden(WINDOW_SIZE)\n","    for batch, i in enumerate(range(0, y.size - 1, bptt)):\n","        data, targets = get_batch(y, i)\n","        # Starting each batch, we detach the hidden state from how it was previously produced.\n","        # If we didn't, the model would try backpropagating all the way to start of the dataset.\n","        model.zero_grad()\n","        if model_type == 'Transformer':\n","            output = model(data)\n","            #output = output.view(-1, ntokens)\n","            output = output[:, -1]\n","        elif model_type == 'Conv':\n","            output = model(data)\n","            output = output.view(data.size()[0], -1, ntokens)[:, -1]\n","        else:\n","            hidden = repackage_hidden(hidden)\n","            output, hidden = model(data, hidden)\n","            output = output.view(-1, WINDOW_SIZE, ntokens)[:, -1]\n","        loss = criterion(output, targets.squeeze(1))\n","        loss.backward()\n","\n","        # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n","        for p in model.parameters():\n","            p.data.add_(p.grad, alpha=-lr)\n","\n","        total_loss += loss.item()\n","\n","        if batch % log_interval == 0 and batch > 0:\n","            cur_loss = total_loss / log_interval\n","            elapsed = time.time() - start_time\n","            print('| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.2f} | ms/batch {:5.3f} | '\n","                    'loss {:5.2f} | ppl {:8.2f}'.format(\n","                epoch, batch, len(y) // bptt, lr,\n","                elapsed * 1000 / log_interval, cur_loss, math.exp(cur_loss)))\n","            total_loss = 0\n","            start_time = time.time()\n","        if dry_run:\n","            break\n","\n","\n","def export_onnx(path, batch_size, seq_len):\n","    print('The model is also exported in ONNX format at {}.'.format(os.path.realpath(path)))\n","    model.eval()\n","    dummy_input = torch.LongTensor(seq_len * batch_size).zero_().view(-1, seq_len).to(device)\n","    inputs = dummy_input\n","    model_types = frozenset(['Transformer', 'Conv'])\n","    if model_type not in model_types:\n","        hidden = model.init_hidden(WINDOW_SIZE)\n","        inputs = (dummy_input, hidden)\n","    torch.onnx.export(model, inputs, path, opset_version=10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oUQBazWyaPv9"},"outputs":[],"source":["device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"]},{"cell_type":"markdown","metadata":{"id":"OpFJqv_Xg1Sk"},"source":["## Обучение свёрточной модели Conv1d Conv1d卷积模型训练"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0fm6T2ECg1Sl"},"outputs":[],"source":["model = ConvModel(np.unique(y).size, 128, 192, 0.1).to(device)\n","criterion = nn.NLLLoss()\n","model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAkGSecSg1Sm"},"outputs":[],"source":["model_type = 'Conv'\n","lr = 1\n","bptt = 64\n","eval_batch_size = bptt\n","clip = 0.1\n","log_interval = 100\n","dry_run = False"]},{"cell_type":"markdown","metadata":{"id":"iX28jY36joUE"},"source":["### Вывод числа параметров  显示参数数量"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JhWW3zJZg1Sm"},"outputs":[],"source":["print(*[(k, p.view(-1).size()[0]) for k, p in model.named_parameters()],\n","      sep='\\n')\n","print('Всего: {:,}'.format(sum(p.view(-1).size()[0] for k, p in model.named_parameters())))"]},{"cell_type":"markdown","metadata":{"id":"fJBLey1rjr4K"},"source":["### Проверка прямого прохода модели 模型前向通过检查"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CUy7o9G1g1Sn"},"outputs":[],"source":["model(torch.ones((32, 16)).type(torch.int64).to(device)).size()"]},{"cell_type":"markdown","metadata":{"id":"PA-O4HCYjuzD"},"source":["### Замер времени прохождения по всему корпусу 测量整个身体的通过时间"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ixFRORLTg1So"},"outputs":[],"source":["%%time\n","evaluate(y)"]},{"cell_type":"markdown","metadata":{"id":"31ZbhjxSjzyu"},"source":["### Обучение модели 模型训练"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZCTLW5hlg1Sp"},"outputs":[],"source":["# Loop over epochs.\n","epochs = 40\n","best_val_loss = None\n","savefile = '%s_next_token.pt'%model_type\n","\n","patience_max = 1\n","patience = 0\n","# At any point you can hit Ctrl + C to break out of training early.\n","try:\n","    for epoch in range(1, epochs+1):\n","        epoch_start_time = time.time()\n","        train()\n","        val_loss = evaluate(y)\n","        print('-' * 89)\n","        print('| end of epoch {:3d} | time: {:5.2f}s | valid loss {:5.3f} | '\n","                'valid ppl {:8.2f}'.format(epoch, (time.time() - epoch_start_time),\n","                                           val_loss, math.exp(val_loss)))\n","        print('-' * 89)\n","        # Save the model if the validation loss is the best we've seen so far.\n","        if not best_val_loss or val_loss < best_val_loss:\n","            with open(savefile, 'wb') as f:\n","                torch.save(model, f)\n","            best_val_loss = val_loss\n","            patience = 0\n","        else:\n","            patience += 1\n","            if patience < patience_max: continue \n","            with open(savefile, 'rb') as f:\n","                model = torch.load(f)\n","            # Anneal the learning rate if no improvement has been seen in the validation dataset.\n","            lr /= 2.0\n","            patience = 0\n","except KeyboardInterrupt:\n","    print('-' * 89)\n","    print('Exiting from training early')"]},{"cell_type":"markdown","metadata":{"id":"FzgNxPRXj25h"},"source":["### Проверка качества, экспорт в ONNX 质量控制，导出到 ONNX"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2yVH2vMQg1Sq"},"outputs":[],"source":["# Загрузка лучшей модели.\n","with open(savefile, 'rb') as f:\n","    model = torch.load(f)\n","    # после загрузки параметры RNN находятся не в одном сегменте памяти\n","    # для помещения в один участок и ускорения прямого прохода\n","    # В настоящее время, только рекуррентная модель поддерживает flatten_parameters.\n","    if model_type in ['RNN_TANH', 'RNN_RELU', 'LSTM', 'GRU']:\n","        model.rnn.flatten_parameters()\n","\n","# Финальная проверка качества\n","test_loss = evaluate(y)\n","print('=' * 89)\n","print('| End of training | test loss {:5.2f} | test ppl {:8.3f}'.format(\n","    test_loss, math.exp(test_loss)))\n","print('=' * 89)\n","\n","onnx_export = '%s_next_token.onnx'%(model_type)\n","if len(onnx_export) > 0:\n","    # Экспортирование модели в формат ONNX\n","    export_onnx(onnx_export, batch_size=1, seq_len=WINDOW_SIZE)"]},{"cell_type":"markdown","metadata":{"id":"h3oevKdZj7Jy"},"source":["### Получение эмбеддингов, проекция на 2D 获取嵌入，2D 投影\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HAcnuCVlg1Sr"},"outputs":[],"source":["#from sklearn.decomposition import PCA\n","embeddings = list(model.encoder.parameters())[0].detach().cpu().numpy()\n","\n","embeddings = UMAP(n_components=2, random_state=2).fit_transform(embeddings)"]},{"cell_type":"markdown","metadata":{"id":"Gj1QlEeFj_xu"},"source":["### Визуализация пространства эмбеддингов 嵌入空间的可视化"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xt2Y22p-g1Ss"},"outputs":[],"source":["# Визуализация обученных эмбеддингов\n","fig, ax = plt.subplots(figsize=(20, 20))\n","ax.scatter(embeddings[:, 0], embeddings[:, 1], s=0.5, alpha=0.4)\n","\n","# берём 300 наиболее частых\n","whitelist = frozenset(corpus_df.token_ids.value_counts().index[:300].values)\n","for i, txt in enumerate(embeddings):\n","    token_id = ids2token_ids[i]\n","    if token_id not in whitelist:\n","        continue\n","    ax.annotate(vocabs[token_id][0],\n","                (embeddings[i][0], embeddings[i][1]))\n","plt.savefig('vecs_%s.svg'%model_type)"]},{"cell_type":"markdown","metadata":{"id":"2Xz5BwxcZ11G"},"source":["## Обучение рекуррентной модели LSTM 训练循环 LSTM 模型"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GBe0Kf6Eam6s"},"outputs":[],"source":["model = RNNModel('LSTM', np.unique(y).size, 50, 256, 2, 0.1, False).to(device)\n","criterion = nn.NLLLoss()\n","model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FWyEg0uocsgi"},"outputs":[],"source":["model_type = 'LSTM'\n","lr=10\n","bptt = 1024\n","eval_batch_size = bptt\n","clip = 0.25\n","log_interval = 10\n","dry_run = False"]},{"cell_type":"markdown","metadata":{"id":"LMVKtlT-kH9D"},"source":["### Вывод числа параметров"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iuetV6xwg1Sw"},"outputs":[],"source":["print(*[(k, p.view(-1).size()[0]) for k, p in model.named_parameters()],\n","      sep='\\n')\n","print('Всего: {:,}'.format(sum(p.view(-1).size()[0] for k, p in model.named_parameters())))"]},{"cell_type":"markdown","metadata":{"id":"MfSoK0mzkMkr"},"source":["### Замер времени прохождения по всему корпусу"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OoLISBWfZKA7"},"outputs":[],"source":["%%time\n","evaluate(y)"]},{"cell_type":"markdown","metadata":{"id":"XgvOwdNhkVW2"},"source":["### Обучение модели"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IxtLBd47eKCv"},"outputs":[],"source":["# Loop over epochs.\n","epochs = 30\n","best_val_loss = None\n","savefile = '%s_next_token.pt'%model_type\n","\n","# At any point you can hit Ctrl + C to break out of training early.\n","try:\n","    for epoch in range(1, epochs+1):\n","        epoch_start_time = time.time()\n","        train()\n","        val_loss = evaluate(y)\n","        print('-' * 89)\n","        print('| end of epoch {:3d} | time: {:5.2f}s | valid loss {:5.3f} | '\n","                'valid ppl {:8.2f}'.format(epoch, (time.time() - epoch_start_time),\n","                                           val_loss, math.exp(val_loss)))\n","        print('-' * 89)\n","        # Save the model if the validation loss is the best we've seen so far.\n","        if not best_val_loss or val_loss < best_val_loss:\n","            with open(savefile, 'wb') as f:\n","                torch.save(model, f)\n","            best_val_loss = val_loss\n","        else:\n","            # Anneal the learning rate if no improvement has been seen in the validation dataset.\n","            lr /= 2.0\n","except KeyboardInterrupt:\n","    print('-' * 89)\n","    print('Exiting from training early')"]},{"cell_type":"markdown","metadata":{"id":"1OBe2M8ikaC6"},"source":["### Проверка качества, экспорт в ONNX 质量控制，导出到 ONNX"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_mmKDgphB7de"},"outputs":[],"source":["# Загрузка лучшей модели.\n","with open(savefile, 'rb') as f:\n","    model = torch.load(f)\n","    # после загрузки параметры RNN находятся не в одном сегменте памяти\n","    # для помещения в один участок и ускорения прямого прохода\n","    # В настоящее время, только рекуррентная модель поддерживает flatten_parameters.\n","    if model_type in ['RNN_TANH', 'RNN_RELU', 'LSTM', 'GRU']:\n","        model.rnn.flatten_parameters()\n","\n","# Финальная проверка качества\n","test_loss = evaluate(y)\n","print('=' * 89)\n","print('| End of training | test loss {:5.2f} | test ppl {:8.3f}'.format(\n","    test_loss, math.exp(test_loss)))\n","print('=' * 89)\n","\n","onnx_export = '%s_next_token.onnx'%(model_type)\n","if len(onnx_export) > 0:\n","    # Экспортирование модели в формат ONNX\n","    export_onnx(onnx_export, batch_size=1, seq_len=WINDOW_SIZE)"]},{"cell_type":"markdown","metadata":{"id":"nwYoVJB1kevT"},"source":["### Получение эмбеддингов, проекция на 2D"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"frRYRpRVVOGM"},"outputs":[],"source":["#from sklearn.decomposition import PCA\n","embeddings = list(model.encoder.parameters())[0].detach().cpu().numpy()\n","\n","embeddings = UMAP(n_components=2, random_state=2).fit_transform(embeddings)"]},{"cell_type":"markdown","metadata":{"id":"rI8J6Rcfkkmd"},"source":["### Визуализация пространства эмбеддингов 嵌入空间的可视化"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"czOeYc1BVqle"},"outputs":[],"source":["# Визуализация обученных эмбеддингов\n","fig, ax = plt.subplots(figsize=(20, 20))\n","ax.scatter(embeddings[:, 0], embeddings[:, 1], s=0.5, alpha=0.4)\n","\n","# берём 300 наиболее частых\n","whitelist = frozenset(corpus_df.token_ids.value_counts().index[:300].values)\n","for i, txt in enumerate(embeddings):\n","    token_id = ids2token_ids[i]\n","    if token_id not in whitelist:\n","        continue\n","    ax.annotate(vocabs[token_id][0],\n","                (embeddings[i][0], embeddings[i][1]))\n","plt.savefig('vecs_%s.svg'%model_type)"]},{"cell_type":"markdown","metadata":{"id":"6xa13KIBZwBj"},"source":["## Обучение модели self-attention 训练自注意力模型"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hdMO6JTVXxxE"},"outputs":[],"source":["model = TransformerModel(np.unique(y).size, 128+32, 4, 192, 2, 0.1).to(device)\n","# ntoken, ninp, nhead, nhid, nlayers, dropout\n","criterion = nn.NLLLoss()\n","model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EQJ1isSIYLL_"},"outputs":[],"source":["model_type = 'Transformer'\n","lr = 2.0\n","bptt = 64\n","eval_batch_size = bptt\n","clip = 0.25\n","log_interval = 100\n","dry_run = False"]},{"cell_type":"markdown","metadata":{"id":"dcKwINf7kprS"},"source":["### Вывод числа параметров"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2n7qLxvykuR2"},"outputs":[],"source":["print(*[(k, p.view(-1).size()[0]) for k, p in model.named_parameters()],\n","      sep='\\n')\n","print('Всего: {:,}'.format(sum(p.view(-1).size()[0] for k, p in model.named_parameters())))"]},{"cell_type":"markdown","metadata":{"id":"A8RYPYAdktqY"},"source":["### Замер времени прохождения по всему корпусу"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5HOYS1c0YSPC"},"outputs":[],"source":["%%time\n","evaluate(y)"]},{"cell_type":"markdown","metadata":{"id":"09IRVJVSky-G"},"source":["### Обучение модели"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hb14tyF_ZeDP"},"outputs":[],"source":["# Loop over epochs.\n","epochs = 40\n","best_val_loss = None\n","savefile = '%s_next_token.pt'%model_type\n","\n","patience_max = 2\n","patience = 0\n","# At any point you can hit Ctrl + C to break out of training early.\n","try:\n","    for epoch in range(1, epochs+1):\n","        epoch_start_time = time.time()\n","        train()\n","        val_loss = evaluate(y)\n","        print('-' * 89)\n","        print('| end of epoch {:3d} | time: {:5.2f}s | valid loss {:5.3f} | '\n","                'valid ppl {:8.2f}'.format(epoch, (time.time() - epoch_start_time),\n","                                           val_loss, math.exp(val_loss)))\n","        print('-' * 89)\n","        # Save the model if the validation loss is the best we've seen so far.\n","        if not best_val_loss or val_loss < best_val_loss:\n","            with open(savefile, 'wb') as f:\n","                torch.save(model, f)\n","            best_val_loss = val_loss\n","            patience = 0\n","        else:\n","            patience += 1\n","            if patience < patience_max: continue \n","            with open(savefile, 'rb') as f:\n","                model = torch.load(f)\n","            # Anneal the learning rate if no improvement has been seen in the validation dataset.\n","            lr /= 2.0\n","            patience = 0\n","except KeyboardInterrupt:\n","    print('-' * 89)\n","    print('Exiting from training early')"]},{"cell_type":"markdown","metadata":{"id":"98y7suzjk37z"},"source":["### Проверка качества, экспорт в ONNX"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T89t6nzOZuK5","executionInfo":{"status":"error","timestamp":1655216900259,"user_tz":-180,"elapsed":320,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":244},"outputId":"151c173d-cb84-433a-ae76-c8fff66c615b"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-78d7c76738b2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Загрузка лучшей модели.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msavefile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;31m# после загрузки параметры RNN находятся не в одном сегменте памяти\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;31m# для помещения в один участок и ускорения прямого прохода\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'savefile' is not defined"]}],"source":["# Загрузка лучшей модели.\n","with open(savefile, 'rb') as f:\n","    model = torch.load(f)\n","    # после загрузки параметры RNN находятся не в одном сегменте памяти\n","    # для помещения в один участок и ускорения прямого прохода\n","    # В настоящее время, только рекуррентная модель поддерживает flatten_parameters.\n","    if model_type in ['RNN_TANH', 'RNN_RELU', 'LSTM', 'GRU']:\n","        model.rnn.flatten_parameters()\n","\n","# Финальная проверка качества\n","test_loss = evaluate(y)\n","print('=' * 89)\n","print('| End of training | test loss {:5.2f} | test ppl {:8.3f}'.format(\n","    test_loss, math.exp(test_loss)))\n","print('=' * 89)\n","\n","onnx_export = '%s_next_token.onnx'%(model_type)\n","if len(onnx_export) > 0:\n","    # Экспортирование модели в формат ONNX\n","    export_onnx(onnx_export, batch_size=1, seq_len=WINDOW_SIZE)"]},{"cell_type":"markdown","metadata":{"id":"2vX-nRLMk6-Y"},"source":["### Получение эмбеддингов, проекция в 2D"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Opj2dpr1aNW9","executionInfo":{"status":"error","timestamp":1655216900601,"user_tz":-180,"elapsed":17,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":226},"outputId":"598acb14-ef7c-43df-a040-99d411d8985e"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-267d86e3ea42>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#from sklearn.decomposition import PCA\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0membeddings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0membeddings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mUMAP\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_components\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membeddings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["#from sklearn.decomposition import PCA\n","embeddings = list(model.encoder.parameters())[0].detach().cpu().numpy()\n","\n","embeddings = UMAP(n_components=2, random_state=2).fit_transform(embeddings)"]},{"cell_type":"markdown","metadata":{"id":"nAiyKrZhlGpM"},"source":["### Визуализация пространства эмбеддингов"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GOB9MKKIaUA1","executionInfo":{"status":"error","timestamp":1655814353524,"user_tz":-480,"elapsed":3618,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"26cc39f0-9352-44f0-af3b-b0c9fbc6238d"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-39e144c34f73>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m     ax.annotate(vocabs[token_id][0],\n\u001b[1;32m     12\u001b[0m                 (embeddings[i][0], embeddings[i][1]))\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'vecs_%s.svg'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0mmodel_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'model_type' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x1440 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Визуализация обученных эмбеддингов\n","fig, ax = plt.subplots(figsize=(20, 20))\n","ax.scatter(embeddings[:, 0], embeddings[:, 1], s=0.5, alpha=0.4)\n","\n","# берём 300 наиболее частых\n","whitelist = frozenset(corpus_df.token_ids.value_counts().index[:300].values)\n","for i, txt in enumerate(embeddings):\n","    token_id = ids2token_ids[i]\n","    if token_id not in whitelist:\n","        continue\n","    ax.annotate(vocabs[token_id][0],\n","                (embeddings[i][0], embeddings[i][1]))\n","plt.savefig('vecs_%s.svg'%model_type)"]},{"cell_type":"code","source":["# установка нужных библиотек\n","!pip install onnxmltools==1.7.0 onnxruntime==1.4.0\n","!pip install tensorflow==1.14.0\n","#!pip install tensorflow-gpu==1.14.0\n","!pip install sentencepiece\n","\n","import onnxruntime\n","import sentencepiece as spm\n","import numpy as np\n","import pickle\n","import re\n","\n","from google.colab import drive\n","drive.mount('/content/drive',force_remount=True)"],"metadata":{"id":"0Q-V6XonF7bM","executionInfo":{"status":"ok","timestamp":1655818358053,"user_tz":-180,"elapsed":81474,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"09733f02-1e10-47e7-e045-d4852ec0ae13"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting onnxmltools==1.7.0\n","  Downloading onnxmltools-1.7.0-py2.py3-none-any.whl (252 kB)\n","\u001b[K     |████████████████████████████████| 252 kB 5.0 MB/s \n","\u001b[?25hCollecting onnxruntime==1.4.0\n","  Downloading onnxruntime-1.4.0-cp37-cp37m-manylinux2010_x86_64.whl (4.4 MB)\n","\u001b[K     |████████████████████████████████| 4.4 MB 63.0 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from onnxmltools==1.7.0) (1.21.6)\n","Collecting onnx\n","  Downloading onnx-1.12.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)\n","\u001b[K     |████████████████████████████████| 13.1 MB 49.7 MB/s \n","\u001b[?25hCollecting onnxconverter-common<1.8.0,>=1.7.0\n","  Downloading onnxconverter_common-1.7.0-py2.py3-none-any.whl (64 kB)\n","\u001b[K     |████████████████████████████████| 64 kB 4.0 MB/s \n","\u001b[?25hRequirement already satisfied: protobuf in /usr/local/lib/python3.7/dist-packages (from onnxmltools==1.7.0) (3.17.3)\n","Collecting skl2onnx\n","  Downloading skl2onnx-1.11.2-py2.py3-none-any.whl (278 kB)\n","\u001b[K     |████████████████████████████████| 278 kB 75.7 MB/s \n","\u001b[?25hCollecting keras2onnx\n","  Downloading keras2onnx-1.7.0-py3-none-any.whl (96 kB)\n","\u001b[K     |████████████████████████████████| 96 kB 5.8 MB/s \n","\u001b[?25hCollecting fire\n","  Downloading fire-0.4.0.tar.gz (87 kB)\n","\u001b[K     |████████████████████████████████| 87 kB 6.7 MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras2onnx->onnxmltools==1.7.0) (2.23.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from fire->keras2onnx->onnxmltools==1.7.0) (1.15.0)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from fire->keras2onnx->onnxmltools==1.7.0) (1.1.0)\n","Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.7/dist-packages (from onnx->onnxmltools==1.7.0) (4.1.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras2onnx->onnxmltools==1.7.0) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras2onnx->onnxmltools==1.7.0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras2onnx->onnxmltools==1.7.0) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras2onnx->onnxmltools==1.7.0) (2022.6.15)\n","Requirement already satisfied: scikit-learn>=0.19 in /usr/local/lib/python3.7/dist-packages (from skl2onnx->onnxmltools==1.7.0) (1.0.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from skl2onnx->onnxmltools==1.7.0) (1.4.1)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.19->skl2onnx->onnxmltools==1.7.0) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.19->skl2onnx->onnxmltools==1.7.0) (3.1.0)\n","Building wheels for collected packages: fire\n","  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fire: filename=fire-0.4.0-py2.py3-none-any.whl size=115942 sha256=a5762d5570bec1f73c4c822ac87c4afe0cf9fb4e7fe0feb009510a692347fb9c\n","  Stored in directory: /root/.cache/pip/wheels/8a/67/fb/2e8a12fa16661b9d5af1f654bd199366799740a85c64981226\n","Successfully built fire\n","Installing collected packages: onnx, onnxconverter-common, fire, skl2onnx, keras2onnx, onnxruntime, onnxmltools\n","Successfully installed fire-0.4.0 keras2onnx-1.7.0 onnx-1.12.0 onnxconverter-common-1.7.0 onnxmltools-1.7.0 onnxruntime-1.4.0 skl2onnx-1.11.2\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow==1.14.0\n","  Downloading tensorflow-1.14.0-cp37-cp37m-manylinux1_x86_64.whl (109.3 MB)\n","\u001b[K     |████████████████████████████████| 109.3 MB 1.2 MB/s \n","\u001b[?25hCollecting keras-applications>=1.0.6\n","  Downloading Keras_Applications-1.0.8-py3-none-any.whl (50 kB)\n","\u001b[K     |████████████████████████████████| 50 kB 7.1 MB/s \n","\u001b[?25hRequirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (0.2.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (3.17.3)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.46.3)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.1.2)\n","Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.14.1)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (0.37.1)\n","Requirement already satisfied: numpy<2.0,>=1.14.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.21.6)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (0.5.3)\n","Collecting tensorflow-estimator<1.15.0rc0,>=1.14.0rc0\n","  Downloading tensorflow_estimator-1.14.0-py2.py3-none-any.whl (488 kB)\n","\u001b[K     |████████████████████████████████| 488 kB 65.8 MB/s \n","\u001b[?25hRequirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (0.8.1)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.15.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.1.0)\n","Collecting tensorboard<1.15.0,>=1.14.0\n","  Downloading tensorboard-1.14.0-py3-none-any.whl (3.1 MB)\n","\u001b[K     |████████████████████████████████| 3.1 MB 55.4 MB/s \n","\u001b[?25hRequirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==1.14.0) (1.1.0)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras-applications>=1.0.6->tensorflow==1.14.0) (3.1.0)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (1.0.1)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (57.4.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (3.3.7)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (4.11.4)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (3.8.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.15.0,>=1.14.0->tensorflow==1.14.0) (4.1.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras-applications>=1.0.6->tensorflow==1.14.0) (1.5.2)\n","Installing collected packages: tensorflow-estimator, tensorboard, keras-applications, tensorflow\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.8.0\n","    Uninstalling tensorflow-estimator-2.8.0:\n","      Successfully uninstalled tensorflow-estimator-2.8.0\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.8.0\n","    Uninstalling tensorboard-2.8.0:\n","      Successfully uninstalled tensorboard-2.8.0\n","  Attempting uninstall: tensorflow\n","    Found existing installation: tensorflow 2.8.2+zzzcolab20220527125636\n","    Uninstalling tensorflow-2.8.2+zzzcolab20220527125636:\n","      Successfully uninstalled tensorflow-2.8.2+zzzcolab20220527125636\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","kapre 0.3.7 requires tensorflow>=2.0.0, but you have tensorflow 1.14.0 which is incompatible.\u001b[0m\n","Successfully installed keras-applications-1.0.8 tensorboard-1.14.0 tensorflow-1.14.0 tensorflow-estimator-1.14.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting sentencepiece\n","  Downloading sentencepiece-0.1.96-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.2 MB)\n","\u001b[K     |████████████████████████████████| 1.2 MB 5.1 MB/s \n","\u001b[?25hInstalling collected packages: sentencepiece\n","Successfully installed sentencepiece-0.1.96\n","Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install onnxruntime"],"metadata":{"id":"4VNNDJX-Osva","executionInfo":{"status":"ok","timestamp":1655818360678,"user_tz":-180,"elapsed":2644,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"430f2193-02e3-4c57-f83d-b543ca753430"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: onnxruntime in /usr/local/lib/python3.7/dist-packages (1.4.0)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (3.17.3)\n","Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.7/dist-packages (from onnxruntime) (1.21.6)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf->onnxruntime) (1.15.0)\n"]}]},{"cell_type":"code","source":["!gdown --folder https://drive.google.com/drive/folders/16D0Bi0FRaStwpwsc9Bzd3_OZmlcE_1Am?usp=sharing"],"metadata":{"id":"sSSZb6XxF_vA","executionInfo":{"status":"ok","timestamp":1655818371280,"user_tz":-180,"elapsed":10607,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"03f76f16-639d-4516-c4c1-50c0a5ad7d38"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Retrieving folder list\n","Processing file 1eoc-FDyTRMCVTt7Pidn3vyM9sYZZulkw Conv_next_token.onnx\n","Processing file 1V6lm38mODFRJZofLYQSwKP6ttoZmiA2X LSTM_next_token.onnx\n","Processing file 15T6us0vfuh8vwvg4TGSnoF-85DbZDMbG Transformer_next_token.onnx\n","Retrieving folder list completed\n","Building directory structure\n","Building directory structure completed\n","Downloading...\n","From: https://drive.google.com/uc?id=1eoc-FDyTRMCVTt7Pidn3vyM9sYZZulkw\n","To: /content/train model/Conv_next_token.onnx\n","100% 22.6M/22.6M [00:00<00:00, 43.7MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1V6lm38mODFRJZofLYQSwKP6ttoZmiA2X\n","To: /content/train model/LSTM_next_token.onnx\n","100% 15.6M/15.6M [00:00<00:00, 50.3MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=15T6us0vfuh8vwvg4TGSnoF-85DbZDMbG\n","To: /content/train model/Transformer_next_token.onnx\n","100% 14.1M/14.1M [00:00<00:00, 59.5MB/s]\n","Download completed\n"]}]},{"cell_type":"code","source":["malin_model1 = onnxruntime.InferenceSession('/content/train model/Transformer_next_token.onnx')\n","malin_model2=onnxruntime.InferenceSession('/content/train model/LSTM_next_token.onnx')\n","con1d=onnxruntime.InferenceSession('/content/train model/Conv_next_token.onnx')\n"],"metadata":{"id":"DUXvWTLlb3CP","executionInfo":{"status":"ok","timestamp":1655818371727,"user_tz":-180,"elapsed":468,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def Transformer(message):\n","    inputs = sp.encode(message)[-16:]\n","    inputs = [0] * max(16 - len(inputs), 0) + inputs\n","    token = malin_model1.run(None, {'src': np.array(inputs, dtype=np.int64).reshape(1, 16)})[0]\n","    finalresult = message\n","    finalresult = finalresult + sp.decode([int(tok.argmax()) for tok in token[0]])\n","    print('the result of transformer:{}'.format(finalresult))\n","\n","\n","def LSTM(message):\n","    inputs = sp.encode(message)[-16:]\n","    inputs = [0] * max(16 - len(inputs), 0) + inputs\n","    finalresult = message\n","    for i in range(10):\n","        token = malin_model2.run(None, {'input.1': np.array(inputs, dtype=np.int64).reshape(1, 16),\n","                                    'onnx::Slice_1': np.zeros((2, 16, 256), dtype=np.float32),\n","                                    'onnx::Slice_2': np.zeros((2, 16, 256), dtype=np.float32)})[0]\n","        inputs.pop(0)\n","        inputs.append(int(token[-1].argmax()))\n","        finalresult = finalresult + ' ' + sp.decode([int(token[-1].argmax())])\n","    print('the result of Lstm:{}'.format(finalresult))\n","\n","\n","def Conv1d(message):\n","    inputs = sp.encode(message)[-16:]\n","    inputs = [0] * max(16 - len(inputs), 0) + inputs\n","    finalresult = message\n","    for i in range(10):\n","        token = con1d.run(None, {'input.1': np.array(inputs, dtype=np.int64).reshape(1, 16)})[0]\n","        inputs.pop(0)\n","        inputs.append(int(token[-1].argmax()))\n","        finalresult = finalresult + ' ' + sp.decode([int(token[-1].argmax())])\n","    print(finalresult)"],"metadata":{"id":"_074ZJL_cAj4","executionInfo":{"status":"ok","timestamp":1655818371727,"user_tz":-180,"elapsed":9,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["sess = onnxruntime.InferenceSession('/content/train model/Conv_next_token.onnx')\n","sess1 = onnxruntime.InferenceSession('/content/train model/LSTM_next_token.onnx') #для генерации текста(2)\n","\n"],"metadata":{"id":"1SG4lgR0GEYj","executionInfo":{"status":"ok","timestamp":1655818371728,"user_tz":-180,"elapsed":10,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["message='Здравствуйте, вы занимались спортом сегодня?'"],"metadata":{"id":"E9dRY0V4OVEe","executionInfo":{"status":"ok","timestamp":1655818371728,"user_tz":-180,"elapsed":9,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["        inputs = sp.Encode(message)[-16:]\n","        inputs = [0] * max(16 - len(inputs), 0) + inputs\n","        finalresult = message\n","        for i in range(10):\n","            token = sess.run(None, {'input.1': np.array(inputs, dtype=np.int64).reshape(1, 16)})[0]\n","            inputs.pop(0)\n","            inputs.append(int(token[-1].argmax()))\n","            # finalresult = finalresult + ' ' + sp.decode([int(token[-1].argmax())])\n","            finalresult = finalresult + ' ' + sp.Decode([int(token[-1].argmax())])\n","        print(finalresult)"],"metadata":{"id":"Hf1KETxUGEiK","executionInfo":{"status":"ok","timestamp":1655818695748,"user_tz":-180,"elapsed":292,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"de4a8bfa-9c21-444b-9cac-8afb2ab8548e"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Здравствуйте, вы занимались спортом сегодня?  и  в ки  и « бы \n"]}]},{"cell_type":"code","source":["\n","message='Здравствуйте, вы занимались спортом сегодня?'\n"],"metadata":{"id":"qp4SDqWkGEri","executionInfo":{"status":"ok","timestamp":1655818696092,"user_tz":-180,"elapsed":4,"user":{"displayName":"王超超","userId":"00933822056115994187"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["Transformer(message)\n","LSTM(message)\n","Conv1d(message)"],"metadata":{"id":"-rOia4IkGp_h","executionInfo":{"status":"ok","timestamp":1655818696092,"user_tz":-180,"elapsed":3,"user":{"displayName":"王超超","userId":"00933822056115994187"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8b3015e3-7ec2-43bb-98df-23de8e79cab5"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["the result of transformer:Здравствуйте, вы занимались спортом сегодня?говоря мне говоря стану от где теперь говоря волн потомто душенька скупост говоря\n","the result of Lstm:Здравствуйте, вы занимались спортом сегодня? к разве брат не  – именно в ки но\n","Здравствуйте, вы занимались спортом сегодня?  и  в ки  и « бы \n"]}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"“Lab7.ipynb”的Ван Чаочао","provenance":[{"file_id":"https://github.com/iu5git/Deep-learning/blob/main/notebooks/Lab7.ipynb","timestamp":1653740721219}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"widgets":{"application/vnd.jupyter.widget-state+json":{"33eb784501024382bfbd13b8bfef2ad4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c31865641c8648e08a4ea52578eb212b","IPY_MODEL_5235e16c1e044282a5bdfd2d4aa7e24d","IPY_MODEL_8d4f5a1c0ca54d4d98c8cf5b6e5534a2"],"layout":"IPY_MODEL_d8aba4ee845e4465a9cdbf731127be10"}},"c31865641c8648e08a4ea52578eb212b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1a29bac2c33a4155ad8e539bc53d4771","placeholder":"​","style":"IPY_MODEL_e3caea3309c34787a7555b420f14bbe8","value":"  3%"}},"5235e16c1e044282a5bdfd2d4aa7e24d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"danger","description":"","description_tooltip":null,"layout":"IPY_MODEL_75fa6e2a8be3492e8e7c9e98c4f53c77","max":178,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f1ef203498b1427aa8a3e3452e467ab6","value":5}},"8d4f5a1c0ca54d4d98c8cf5b6e5534a2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_60648f80ce734d1aa2baab151f09010c","placeholder":"​","style":"IPY_MODEL_f4834a470309412695622b141b7f1e83","value":" 5/178 [00:05&lt;03:00,  1.04s/it]"}},"d8aba4ee845e4465a9cdbf731127be10":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1a29bac2c33a4155ad8e539bc53d4771":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3caea3309c34787a7555b420f14bbe8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"75fa6e2a8be3492e8e7c9e98c4f53c77":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f1ef203498b1427aa8a3e3452e467ab6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"60648f80ce734d1aa2baab151f09010c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f4834a470309412695622b141b7f1e83":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}